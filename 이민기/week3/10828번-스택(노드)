#include<iostream>
using namespace std;

class Node {
private:
	int elem;
	Node* next;
public:
	Node() {
		elem = 0;
		next = 0;
	}
	friend class SinglyLL;
};

class SinglyLL {
private:
	Node* head;
	Node* tail;
	int StackSize;
public:
	SinglyLL() {
		head = new Node;
		tail = new Node;
		head->next = tail;
		StackSize = 0;
	}
	void print() {
		Node* current = head->next;
		for (int i{ 0 }; i < StackSize; i++) {
			cout << current->elem << " ";
			current = current->next;
		}
		cout << endl;
	}
	void push(int x) {
		Node* v = new Node;
		v->elem = x;
		Node* current = head;
		for (int i{ 0 }; i <= StackSize; i++) { //더미 노드를 생각하여 표현해야함
			current = current->next;
		}
		v->next = current->next;
		current->next = v;
		StackSize++;
	}
	void pop() {
		if (StackSize == 0) {
			cout << "-1" << endl;
		}
		else {
			Node* current = head;
			for (int i{ 0 }; i <= StackSize; i++) {  //더미 노드를 생각하여 표현해야함
				current = current->next;
			}
			cout << current->elem << endl;
			delete current;
			StackSize--;
		}
	}
	void size() {
		int count{ 0 };
		Node* current = head->next;
		for (int i{ 0 }; i < StackSize; i++) {
			count++;
			current = current->next;
		}
		cout << count << endl;
	}
	void empty() {
		if (StackSize == 0) {
			cout << "1" << endl;
		}
		else {
			cout << "0" << endl;
		}
	}
	void top() {
		if (StackSize == 0) {
			cout << "-1" << endl;
		}
		else {
			Node* current = head->next;
			for (int i{ 0 }; i < StackSize; i++) {
				current = current->next;
			}
			cout << current->elem << endl;
		}
	}
};

int main() {
		int n;
		cin >> n;
		string order;

		SinglyLL stack;

		while (n--) {
			cin >> order;
			if (order == "push") {
				int x;
				cin >> x;
				stack.push(x);
			}
			else if (order == "pop") {
				stack.pop();
			}
			else if (order == "size") {
				stack.size();
			}
			else if (order == "empty") {
				stack.empty();
			}
			else if (order == "top") {
				stack.top();
			}
		}
}
